// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Dog struct {
	ID        string    `json:"id"`
	Name      string    `json:"name"`
	Breed     Breed     `json:"breed"`
	BirthDate time.Time `json:"birthDate"`
	Owner     *Owner    `json:"owner"`
}

type NewDog struct {
	BirthDate time.Time `json:"birthDate"`
	Breed     Breed     `json:"breed"`
	Name      string    `json:"name"`
}

type Owner struct {
	ID    string `json:"id"`
	Email string `json:"email"`
}

type Breed string

const (
	BreedChihuahua Breed = "CHIHUAHUA"
)

var AllBreed = []Breed{
	BreedChihuahua,
}

func (e Breed) IsValid() bool {
	switch e {
	case BreedChihuahua:
		return true
	}
	return false
}

func (e Breed) String() string {
	return string(e)
}

func (e *Breed) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Breed(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Breed", str)
	}
	return nil
}

func (e Breed) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
